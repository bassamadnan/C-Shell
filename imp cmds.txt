#include "main.h"
struct utsname unameData;
int main(int argc, char *argv[])
{
###################### SPEC 1 #######################################################
  uname(&unameData);
  printf("%s\n", unameData.sysname);

   printf("system name = %s\n", unameData.sysname);
   printf("node name   = %s\n", unameData.nodename);
   printf("release     = %s\n", unameData.release);
   printf("version     = %s\n", unameData.version);
   printf("machine     = %s\n", unameData.machine);
   char hostname[1024];
    gethostname(hostname, 1024);
   printf("%s\n", getlogin());
      printf("%s\n", getcwd(hostname, sizeof(hostname)));
###################### SPEC 2 #######################################################
char str[] = "This is a test for & break point";
  const char s[] = "&";
  char *token = strtok(str, s);
  while(token != NULL){
    printf("%s\n", token);
    token = strtok(NULL, s);
  }
  ###################### SPEC 3 #######################################################



  ###################### SPEC 4 #######################################################
  struct dirent *de;  // Pointer for directory entry
  
    // opendir() returns a pointer of DIR type. 
    DIR *dr = opendir(".");
  
    if (dr == NULL)  // opendir returns NULL if couldn't open directory
    {
        printf("Could not open current directory" );
        return 0;
    }
  
    // Refer http://pubs.opengroup.org/onlinepubs/7990989775/xsh/readdir.html
    // for readdir()
    while ((de = readdir(dr)) != NULL)
            printf("%s\n", de->d_name);
  
    closedir(dr);    

    ###################### SPEC 5 #######################################################
void ls(){
    struct dirent *de;
    DIR *dr = opendir("/home/bassam/Documents/OS/Labs/MP1");
    // if(dr == NULL)
    char files[1024][1024];
    int argc = 0;
    while((de = readdir(dr)) != NULL){
        str test =  de->d_name; 
        strcpy(files[argc++], test);
        // printf("%s, type: %hhu\n", de->d_name, de->d_type);
    }

    printf("\n");
    qsort(files, argc, sizeof *files, cmpstr50);
    for (size_t i = 0; i < argc; i++)
        puts (files[i]);
    closedir(dr);
}

  return 0;
}